// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/playback.proto

package playback

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlaybackService_StreamSong_FullMethodName = "/playback.PlaybackService/StreamSong"
)

// PlaybackServiceClient is the client API for PlaybackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaybackServiceClient interface {
	StreamSong(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (PlaybackService_StreamSongClient, error)
}

type playbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaybackServiceClient(cc grpc.ClientConnInterface) PlaybackServiceClient {
	return &playbackServiceClient{cc}
}

func (c *playbackServiceClient) StreamSong(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (PlaybackService_StreamSongClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlaybackService_ServiceDesc.Streams[0], PlaybackService_StreamSong_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &playbackServiceStreamSongClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlaybackService_StreamSongClient interface {
	Recv() (*Song, error)
	grpc.ClientStream
}

type playbackServiceStreamSongClient struct {
	grpc.ClientStream
}

func (x *playbackServiceStreamSongClient) Recv() (*Song, error) {
	m := new(Song)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlaybackServiceServer is the server API for PlaybackService service.
// All implementations must embed UnimplementedPlaybackServiceServer
// for forward compatibility
type PlaybackServiceServer interface {
	StreamSong(*ContentRequest, PlaybackService_StreamSongServer) error
	mustEmbedUnimplementedPlaybackServiceServer()
}

// UnimplementedPlaybackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlaybackServiceServer struct {
}

func (UnimplementedPlaybackServiceServer) StreamSong(*ContentRequest, PlaybackService_StreamSongServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSong not implemented")
}
func (UnimplementedPlaybackServiceServer) mustEmbedUnimplementedPlaybackServiceServer() {}

// UnsafePlaybackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaybackServiceServer will
// result in compilation errors.
type UnsafePlaybackServiceServer interface {
	mustEmbedUnimplementedPlaybackServiceServer()
}

func RegisterPlaybackServiceServer(s grpc.ServiceRegistrar, srv PlaybackServiceServer) {
	s.RegisterService(&PlaybackService_ServiceDesc, srv)
}

func _PlaybackService_StreamSong_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlaybackServiceServer).StreamSong(m, &playbackServiceStreamSongServer{stream})
}

type PlaybackService_StreamSongServer interface {
	Send(*Song) error
	grpc.ServerStream
}

type playbackServiceStreamSongServer struct {
	grpc.ServerStream
}

func (x *playbackServiceStreamSongServer) Send(m *Song) error {
	return x.ServerStream.SendMsg(m)
}

// PlaybackService_ServiceDesc is the grpc.ServiceDesc for PlaybackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaybackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playback.PlaybackService",
	HandlerType: (*PlaybackServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSong",
			Handler:       _PlaybackService_StreamSong_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/playback.proto",
}
