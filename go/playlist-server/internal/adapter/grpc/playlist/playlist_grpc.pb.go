// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/playlist.proto

package playlist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlaylistService_Create_FullMethodName        = "/PlaylistService/Create"
	PlaylistService_List_FullMethodName          = "/PlaylistService/List"
	PlaylistService_Get_FullMethodName           = "/PlaylistService/Get"
	PlaylistService_AddContent_FullMethodName    = "/PlaylistService/AddContent"
	PlaylistService_RemoveContent_FullMethodName = "/PlaylistService/RemoveContent"
	PlaylistService_PartyMode_FullMethodName     = "/PlaylistService/PartyMode"
)

// PlaylistServiceClient is the client API for PlaylistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Playlist, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Get(ctx context.Context, in *PlaylistRequest, opts ...grpc.CallOption) (*Playlist, error)
	AddContent(ctx context.Context, opts ...grpc.CallOption) (PlaylistService_AddContentClient, error)
	RemoveContent(ctx context.Context, opts ...grpc.CallOption) (PlaylistService_RemoveContentClient, error)
	PartyMode(ctx context.Context, opts ...grpc.CallOption) (PlaylistService_PartyModeClient, error)
}

type playlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistServiceClient(cc grpc.ClientConnInterface) PlaylistServiceClient {
	return &playlistServiceClient{cc}
}

func (c *playlistServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Playlist, error) {
	out := new(Playlist)
	err := c.cc.Invoke(ctx, PlaylistService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, PlaylistService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Get(ctx context.Context, in *PlaylistRequest, opts ...grpc.CallOption) (*Playlist, error) {
	out := new(Playlist)
	err := c.cc.Invoke(ctx, PlaylistService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) AddContent(ctx context.Context, opts ...grpc.CallOption) (PlaylistService_AddContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlaylistService_ServiceDesc.Streams[0], PlaylistService_AddContent_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &playlistServiceAddContentClient{stream}
	return x, nil
}

type PlaylistService_AddContentClient interface {
	Send(*OperationRequest) error
	CloseAndRecv() (*Playlist, error)
	grpc.ClientStream
}

type playlistServiceAddContentClient struct {
	grpc.ClientStream
}

func (x *playlistServiceAddContentClient) Send(m *OperationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *playlistServiceAddContentClient) CloseAndRecv() (*Playlist, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Playlist)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playlistServiceClient) RemoveContent(ctx context.Context, opts ...grpc.CallOption) (PlaylistService_RemoveContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlaylistService_ServiceDesc.Streams[1], PlaylistService_RemoveContent_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &playlistServiceRemoveContentClient{stream}
	return x, nil
}

type PlaylistService_RemoveContentClient interface {
	Send(*OperationRequest) error
	CloseAndRecv() (*Playlist, error)
	grpc.ClientStream
}

type playlistServiceRemoveContentClient struct {
	grpc.ClientStream
}

func (x *playlistServiceRemoveContentClient) Send(m *OperationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *playlistServiceRemoveContentClient) CloseAndRecv() (*Playlist, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Playlist)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playlistServiceClient) PartyMode(ctx context.Context, opts ...grpc.CallOption) (PlaylistService_PartyModeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlaylistService_ServiceDesc.Streams[2], PlaylistService_PartyMode_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &playlistServicePartyModeClient{stream}
	return x, nil
}

type PlaylistService_PartyModeClient interface {
	Send(*PartyModeRequest) error
	Recv() (*PartyModeResponse, error)
	grpc.ClientStream
}

type playlistServicePartyModeClient struct {
	grpc.ClientStream
}

func (x *playlistServicePartyModeClient) Send(m *PartyModeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *playlistServicePartyModeClient) Recv() (*PartyModeResponse, error) {
	m := new(PartyModeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlaylistServiceServer is the server API for PlaylistService service.
// All implementations must embed UnimplementedPlaylistServiceServer
// for forward compatibility
type PlaylistServiceServer interface {
	Create(context.Context, *CreateRequest) (*Playlist, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Get(context.Context, *PlaylistRequest) (*Playlist, error)
	AddContent(PlaylistService_AddContentServer) error
	RemoveContent(PlaylistService_RemoveContentServer) error
	PartyMode(PlaylistService_PartyModeServer) error
	mustEmbedUnimplementedPlaylistServiceServer()
}

// UnimplementedPlaylistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlaylistServiceServer struct {
}

func (UnimplementedPlaylistServiceServer) Create(context.Context, *CreateRequest) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPlaylistServiceServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPlaylistServiceServer) Get(context.Context, *PlaylistRequest) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPlaylistServiceServer) AddContent(PlaylistService_AddContentServer) error {
	return status.Errorf(codes.Unimplemented, "method AddContent not implemented")
}
func (UnimplementedPlaylistServiceServer) RemoveContent(PlaylistService_RemoveContentServer) error {
	return status.Errorf(codes.Unimplemented, "method RemoveContent not implemented")
}
func (UnimplementedPlaylistServiceServer) PartyMode(PlaylistService_PartyModeServer) error {
	return status.Errorf(codes.Unimplemented, "method PartyMode not implemented")
}
func (UnimplementedPlaylistServiceServer) mustEmbedUnimplementedPlaylistServiceServer() {}

// UnsafePlaylistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistServiceServer will
// result in compilation errors.
type UnsafePlaylistServiceServer interface {
	mustEmbedUnimplementedPlaylistServiceServer()
}

func RegisterPlaylistServiceServer(s grpc.ServiceRegistrar, srv PlaylistServiceServer) {
	s.RegisterService(&PlaylistService_ServiceDesc, srv)
}

func _PlaylistService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Get(ctx, req.(*PlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_AddContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlaylistServiceServer).AddContent(&playlistServiceAddContentServer{stream})
}

type PlaylistService_AddContentServer interface {
	SendAndClose(*Playlist) error
	Recv() (*OperationRequest, error)
	grpc.ServerStream
}

type playlistServiceAddContentServer struct {
	grpc.ServerStream
}

func (x *playlistServiceAddContentServer) SendAndClose(m *Playlist) error {
	return x.ServerStream.SendMsg(m)
}

func (x *playlistServiceAddContentServer) Recv() (*OperationRequest, error) {
	m := new(OperationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PlaylistService_RemoveContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlaylistServiceServer).RemoveContent(&playlistServiceRemoveContentServer{stream})
}

type PlaylistService_RemoveContentServer interface {
	SendAndClose(*Playlist) error
	Recv() (*OperationRequest, error)
	grpc.ServerStream
}

type playlistServiceRemoveContentServer struct {
	grpc.ServerStream
}

func (x *playlistServiceRemoveContentServer) SendAndClose(m *Playlist) error {
	return x.ServerStream.SendMsg(m)
}

func (x *playlistServiceRemoveContentServer) Recv() (*OperationRequest, error) {
	m := new(OperationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PlaylistService_PartyMode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlaylistServiceServer).PartyMode(&playlistServicePartyModeServer{stream})
}

type PlaylistService_PartyModeServer interface {
	Send(*PartyModeResponse) error
	Recv() (*PartyModeRequest, error)
	grpc.ServerStream
}

type playlistServicePartyModeServer struct {
	grpc.ServerStream
}

func (x *playlistServicePartyModeServer) Send(m *PartyModeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *playlistServicePartyModeServer) Recv() (*PartyModeRequest, error) {
	m := new(PartyModeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlaylistService_ServiceDesc is the grpc.ServiceDesc for PlaylistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaylistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PlaylistService",
	HandlerType: (*PlaylistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PlaylistService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PlaylistService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PlaylistService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddContent",
			Handler:       _PlaylistService_AddContent_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RemoveContent",
			Handler:       _PlaylistService_RemoveContent_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PartyMode",
			Handler:       _PlaylistService_PartyMode_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/playlist.proto",
}
