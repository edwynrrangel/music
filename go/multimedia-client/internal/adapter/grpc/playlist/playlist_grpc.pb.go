// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/playlist.proto

package playlist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlaylistService_Manage_FullMethodName = "/PlaylistService/Manage"
	PlaylistService_List_FullMethodName   = "/PlaylistService/List"
	PlaylistService_Remove_FullMethodName = "/PlaylistService/Remove"
)

// PlaylistServiceClient is the client API for PlaylistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistServiceClient interface {
	// Playlist management
	Manage(ctx context.Context, opts ...grpc.CallOption) (PlaylistService_ManageClient, error)
	// List playlists
	List(ctx context.Context, in *ListPlaylistRequest, opts ...grpc.CallOption) (*ListPlaylistResponse, error)
	// Remove playlist
	Remove(ctx context.Context, in *RemovePlaylistRequest, opts ...grpc.CallOption) (*RemovePlaylistResponse, error)
}

type playlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistServiceClient(cc grpc.ClientConnInterface) PlaylistServiceClient {
	return &playlistServiceClient{cc}
}

func (c *playlistServiceClient) Manage(ctx context.Context, opts ...grpc.CallOption) (PlaylistService_ManageClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlaylistService_ServiceDesc.Streams[0], PlaylistService_Manage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &playlistServiceManageClient{stream}
	return x, nil
}

type PlaylistService_ManageClient interface {
	Send(*PlaylistRequest) error
	Recv() (*PlaylistResponse, error)
	grpc.ClientStream
}

type playlistServiceManageClient struct {
	grpc.ClientStream
}

func (x *playlistServiceManageClient) Send(m *PlaylistRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *playlistServiceManageClient) Recv() (*PlaylistResponse, error) {
	m := new(PlaylistResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playlistServiceClient) List(ctx context.Context, in *ListPlaylistRequest, opts ...grpc.CallOption) (*ListPlaylistResponse, error) {
	out := new(ListPlaylistResponse)
	err := c.cc.Invoke(ctx, PlaylistService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) Remove(ctx context.Context, in *RemovePlaylistRequest, opts ...grpc.CallOption) (*RemovePlaylistResponse, error) {
	out := new(RemovePlaylistResponse)
	err := c.cc.Invoke(ctx, PlaylistService_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistServiceServer is the server API for PlaylistService service.
// All implementations must embed UnimplementedPlaylistServiceServer
// for forward compatibility
type PlaylistServiceServer interface {
	// Playlist management
	Manage(PlaylistService_ManageServer) error
	// List playlists
	List(context.Context, *ListPlaylistRequest) (*ListPlaylistResponse, error)
	// Remove playlist
	Remove(context.Context, *RemovePlaylistRequest) (*RemovePlaylistResponse, error)
	mustEmbedUnimplementedPlaylistServiceServer()
}

// UnimplementedPlaylistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlaylistServiceServer struct {
}

func (UnimplementedPlaylistServiceServer) Manage(PlaylistService_ManageServer) error {
	return status.Errorf(codes.Unimplemented, "method Manage not implemented")
}
func (UnimplementedPlaylistServiceServer) List(context.Context, *ListPlaylistRequest) (*ListPlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPlaylistServiceServer) Remove(context.Context, *RemovePlaylistRequest) (*RemovePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedPlaylistServiceServer) mustEmbedUnimplementedPlaylistServiceServer() {}

// UnsafePlaylistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistServiceServer will
// result in compilation errors.
type UnsafePlaylistServiceServer interface {
	mustEmbedUnimplementedPlaylistServiceServer()
}

func RegisterPlaylistServiceServer(s grpc.ServiceRegistrar, srv PlaylistServiceServer) {
	s.RegisterService(&PlaylistService_ServiceDesc, srv)
}

func _PlaylistService_Manage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlaylistServiceServer).Manage(&playlistServiceManageServer{stream})
}

type PlaylistService_ManageServer interface {
	Send(*PlaylistResponse) error
	Recv() (*PlaylistRequest, error)
	grpc.ServerStream
}

type playlistServiceManageServer struct {
	grpc.ServerStream
}

func (x *playlistServiceManageServer) Send(m *PlaylistResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *playlistServiceManageServer) Recv() (*PlaylistRequest, error) {
	m := new(PlaylistRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PlaylistService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).List(ctx, req.(*ListPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).Remove(ctx, req.(*RemovePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaylistService_ServiceDesc is the grpc.ServiceDesc for PlaylistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaylistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PlaylistService",
	HandlerType: (*PlaylistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PlaylistService_List_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _PlaylistService_Remove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Manage",
			Handler:       _PlaylistService_Manage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/playlist.proto",
}
